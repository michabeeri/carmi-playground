mid values that are not exposed appear as top-level values ith names like $mapValues-12-13-41


function tryGetTopLevelValues(v){
	if (v && v.constructor && v.constructor.name === 'Array') {
		if (v[0] === '*get*' && v[2] === '*topLevel*' && carmiInstance[v[1]]) {
			return {name: v[1], type: 'topLevel', value: carmiInstance[v[1]], ast: tryGetTopLevelValues(carmiInstance.$ast()[v[1]])}
        }
		else if (v[0] === '*get*' && v[2] === '*root*' && carmiInstance.$model[v[1]]) {
			return {name: v[1], type: 'root', value: carmiInstance.$model[v[1]]}
        } else {
			return v.map(tryGetTopLevelValues)
        }
    }
	return v
}
tryGetTopLevelValues(carmiInstance.$ast().isBlocked2)


carmiInstance.setTodo('mashebalecha', {
    text: 'insideOfBatch2',
    done: true,
    blockedBy: false
})


function getAncestors(v){
	if (v && v.constructor && v.constructor.name === 'Array') {
		if (v[0] === '*get*' && v[2] === '*topLevel*' && carmiInstance[v[1]]) {
			return _([v[1]]).concat(getAncestors(carmiInstance.$ast()[v[1]])).compact().uniq().value()
        }
		else if (v[0] === '*get*' && v[2] === '*root*' && carmiInstance.$model[v[1]]) {
			return [v[1]]
        } else {
			return _(v).flatMap(getAncestors).compact().uniq().value()
        }
    }
	return []
}

function getFriendlyAst(nodeName) {
  function getOtherValues(v) {
      if (v && v.constructor && v.constructor.name === 'Array') {
          if (v[0] === '*get*' && v[2] === '*topLevel*' && carmiInstance[v[1]]) {
              return [v[1]]
          }
          else if (v[0] === '*get*' && v[2] === '*root*' && carmiInstance.$model[v[1]]) {
              return [v[1]]
          } else {
              return _(v).flatMap(getOtherValues).compact().uniq().value()
          }
      }
      return []
  }

  const node = carmiInstance.$ast()[nodeName]
  const ast = {mainValueName: nodeName}
  if (node) {
      _.assign(ast, {
          operation: node[0],
          mainValue: getFriendlyAst(node[2][1]),
          otherValues: _.map(getOtherValues(node[1]), getFriendlyAst)
      })
  }

  return ast

}
